---
title: 为AWS定制化Cloud Foundry部署Manifest文件
owner: Release Integration
---

<strong><%= modified_date %></strong>

本节描述如何为Amazon Web Services (AWS)创建Cloud Foundry部署的manifest文件.
在创建manifest文件之前, 需要为Cloud Foundry在AWS上[创建环境](setup_aws.html), 并在AWS上[部署BOSH](setup_bosh_aws.html).
进行如下步骤来创建Cloud Foundry的manifest文件:

1. 使用BOSH CLI命令行以[获取BOSH Director的UUID](#bosh-uuid). 你用来定制你的manifest stub.
1. 创建一个YAML格式的manifest文件stub. 见下面的AWS[示例manifest文件stub](#stub), 并按照[编辑说明](#editing)来定制以适合你的部署.
1. 用脚本合并manifest文件stub与其他在`cf-release` repository的配置文件合并, [生成你的配置文件manifest](#generate)

<p class="note"><strong>Note</strong>:
  AWS 默认使用 用AWS帐号密码的Fog 作为Cloud Controller的blobstore.
  要使用其他blobstore配置, 参见<a href="/deploying/common/cc-blobstore-config.html">Cloud Controller Blobstore 配置</a> 一节.</p>

##<a id='bosh-uuid'></a> Step 1: 取得你的BOSH Director UUID

<%= partial '../common/bosh_uuid' %>

##<a id='stub'></a> Step 2: 创建你的Manifest文件stub

查看 AWS的[manifest文件stub实例](#example-stub), 并按照 [编辑说明](#editing) 为你的部署定制该文件.

###<a id="example-stub"></a>为AWS的Cloud Foundry 部署Manifest Stub

<%= yield_for_code_snippet from: 'cloudfoundry/cf-release', at: 'cf-stub-aws' %>

###<a id="editing"></a>编辑说明

<table border="1" class="nice">
  <tr>
    <th style="width:35%">部署Manifest Stub文件的内容</th>
    <th>编辑说明</th>
  </tr>
  <tr>
    <td><pre><code>
meta:
  environment: ENVIRONMENT
    </code></pre></td>
    <td>将 <code>ENVIRONMENT</code>替换为描述你的环境的任意名称, 如<code>aws-prod</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
director_uuid: DIRECTOR_UUID
    </code></pre></td>
    <td>将 <code>DIRECTOR_UUID</code> 替换为 BOSH Director的 UUID. 使用
    <code>bosh status --uuid</code> 查看 BOSH Director的 UUID.
    </td>
  </tr>
  <tr>
    <td><pre><code>
networks:
- name: cf1
  subnets:
    - range: 10.10.16.0/20
      reserved:
        - 10.10.16.2 - 10.10.16.9
      static:
        - 10.10.16.10 - 10.10.16.255
      gateway: 10.10.16.1
      dns:
        - 10.10.0.2
      cloud_properties:
        security_groups:
          - cf
        subnet: (( properties.template_only.aws.subnet_ids.cf1 ))
- name: cf2
  subnets:
    - range: 10.10.80.0/20
      reserved:
        - 10.10.80.2 - 10.10.80.9
      static:
        - 10.10.80.10 - 10.10.80.255
      gateway: 10.10.80.1
      dns:
        - 10.10.0.2
      cloud_properties:
        security_groups:
          - cf
        subnet: (( properties.template_only.aws.subnet_ids.cf2 ))
      </code></pre></td>
    <td>如果你使用了<code>bosh aws create</code> 设定你的AWS环境, 如果要适应你在bosh.yml文件中的子网范围, 则在这里修改IP地址.
    <br/><br/>
    本例假定你有在带CIDR的AWS VPC中有两个子网, 分别是<code>10.10.16.0/20</code> 和 <code>10.10.80.0/20</code>. 相应更新 <code>range</code>, <code>reserved</code>, <code>static</code>, 以及 <code>gateway</code>的值, 如果你的子网的CIDR有所不同.
    <br/><br/>
    本例还假定你有一个security group <code>cf</code> 适应于 Cloud Foundry 虚拟机. 修改这个值, 如果你的security group名字与假定不同.
      </td>
  </tr>
  <tr>
    <td><pre><code>
properties:
  template_only:
    aws:
      access_key_id: AWS_ACCESS_KEY
      secret_access_key: AWS_SECRET_ACCESS_KEY
      availability_zone: ZONE_1
      availability_zone2: ZONE_2
      subnet_ids:
        cf1: SUBNET_ID_1
        cf2: SUBNET_ID_2
      </code></pre></td>
    <td>将 <code>AWS_ACCESS_KEY</code> 和 <code>AWS_SECRET_ACCESS_KEY</code> 替换为AWS的帐号密码,以便Cloud Controller管理 你为本次部署准备的 S3 buckets中的asset.
    <br/><br/>
    替换 <code>ZONE_1</code> 和 <code>ZONE_2</code> 为你想要分发部署的EC2的两个Availability Zones.
    <br/><br/>
    替换 <code>SUBNET_ID_1</code> 和 <code>SUBNET_ID_2</code> 为与上面<code>networks</code>一节配置的子网所对应的 VPC 子网ID.
    <br/><br/>
    如果你使用了 <code>bosh aws create</code>命令, 则key和zone的值在你最开始用以bootstrap的`bosh_environment`文件中, 而 对应子网cf1和cf2的子网ID已经在 <code>bosh_environment</code> 文件中创建好了.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  system_domain: SYSTEM_DOMAIN
  system_domain_organization: SYSTEM_DOMAIN_ORGANIZATION
  app_domains:
   - APP_DOMAIN
      </code></pre></td>
    <td>替换 <code>SYSTEM_DOMAIN</code> 为所有系统component使用的域名.
      例如, 用<code>api.SYSTEM_DOMAIN</code>来访问Cloud Controller API

      替换<code>api.SYSTEM_DOMAIN</code>为你想要关联的Cloud Foundry安装上的应用.
      例如, 如果你发布了<code>my-app</code>, 它就可以在<code>my-app.APP_DOMAIN</code>访问.
    <br/><br/>
    通常建议将<code>SYSTEM_DOMAIN</code>和<code>APP_DOMAIN</code>设为不同的值,
    如 <code>sys.cloud-09.cf-app.com</code> 和 <code>apps.cloud-09.cf-app.com</code>.
    简单的部署可以使用同一个域名,
    如<code>cloud-09.cf-app.com</code>

    然而你不能让一个域名属性扩展另外那个域名,
    比如, 你不能设定 <code>SYSTEM_DOMAIN</code> 为 <code>cloud-09.cf-app.com</code>
    同时设定 <code>APP_DOMAIN</code> 为 <code>apps.cloud-09.cf-app.com</code>.
    <br/><br/>

    如果你使用了 <code>bosh aws create</code>, 那么将两个域名设为同一个值. 这个值是连接<code>bosh_environment</code>文件的<code>BOSH_VPC_SUBDOMAIN</code> 和 <code>BOSH_VPC_DOMAIN</code>得到的.
    <br/><br/>

    为<code>SYSTEM_DOMAIN_ORGANIZATION</code>选取你喜欢的任意名字.
    这个organization将会被创建, 并配置成拥有<code>SYSTEM_DOMAIN</code>.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  ssl:
    skip_cert_verify: true
    </code></pre></td>
    <td> 将<code>skip_cert_verify</code> 设置为 <code>true</code> 略过 SSL 证书验证.
      如果你想要使用SSL证书为进入部署的网络流量加密, 参见<a href="../../adminguide/securing-traffic.html">为进入 Cloud Foundry的网络流量加密</a>
    </td>
  <tr>
    <td><pre><code>
  cc:
    staging_upload_user: STAGING_UPLOAD_USER
    staging_upload_password: STAGING_UPLOAD_PASSWORD
    bulk_api_password: BULK_API_PASSWORD
    db_encryption_key: CCDB_ENCRYPTION_KEY
    </code></pre></td>
    <td>
      Cloud Controller API的endpoint需要基本认证.
      替换 <code>STAGING_UPLOAD_USER</code> 和 <code>STAGING_UPLOAD_PASSWORD</code> 为你选择的用户名和密码.
      <br /><br />
      替换 <code>BULK_API_PASSWORD</code> 为你选择的密码. Health Manager使用该密码访问Cloud Controller bulk API.
      <br /><br />
      替换 <code>CCDB_ENCRYPTION_KEY</code>为你生成的 用以加密Cloud Controller数据库中敏感值的 安全密钥.
      你可以使用任何随机字符串.
      例如, 在命令行运行命令<code>md5 -qs "$(date)"</code> 使用MD5哈希生成器生成随机字符串
  </td>
  </tr>
  <tr>
    <td><pre><code>
  ccdb:
    db_scheme: CCDB_SCHEME
    roles:
      - tag: admin
        name: CCDB_USER_NAME
        password: CCDB_PASSWORD
    databases:
      - tag: cc
        name: ccdb
    address: CCDB_ADDRESS
    port: CCDB_PORT
    </code></pre></td>
    <td>
      stub文件的这部分定义 Cloud Controller 如何连接到 其 数据库.
      使用的值取决于你如何部署你的数据库.
      <br /><br />
      如果你使用了 <code>bosh aws create</code>, 在生成的 <code>aws_rds_bosh_receipt.yml</code> 文件中找到需要的值.
      数据库是一个Amazon RDS实例, 且所有stub文件中的<code>CCDB_*</code>值必须匹配AWS定义的scheme, username, password, address, 及 port .
      <br /><br />
      如果你没有使用 <code>bosh aws create</code>部署数据库, 例如使用了cf-release里面的 <code>postgres</code> job, 则<code>CCDB_*</code>的值必须匹配数据库的配置.
      如果你使用的是PostgreSQL, 你的数据库必须有为Cloud Foundry提供下列扩展: <code>uuid-ossp</code>, <code>pgcrypto</code>, 以及<code>citext</code>.
      PostgreSQL数据库的 <code>db_scheme</code> 是 <code>postgresql</code>, 而不是 <code>postgres</code>.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  consul:
    encrypt_keys:
      - CONSUL_ENCRYPT_KEY
    ca_cert: CONSUL_CA_CERT
    server_cert: CONSUL_SERVER_CERT
    server_key: CONSUL_SERVER_KEY
    agent_cert: CONSUL_AGENT_CERT
    agent_key: CONSUL_AGENT_KEY
      </code></pre></td>
    <td>参见 <a href="../common/consul-security.html">为consul进行安全配置</a>中的说明.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  loggregator_endpoint:
    shared_secret: LOGGREGATOR_ENDPOINT_SHARED_SECRET
    </code></pre></td>
    <td>生成一个秘密的字符串, 用其替换<code>LOGGREGATOR_ENDPOINT_SHARED_SECRET</code>.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  nats:
    user: NATS_USER
    password: NATS_PASSWORD
      </code></pre></td>
    <td>替换 <code>NATS_USER</code> 和 <code>NATS_PASSWORD</code> 为你选择的用户名和安全密码. Cloud Foundry 的各个component 使用这个帐号密码 在NATS message bus上彼此沟通.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  router:
    status:
      user: ROUTER_USER
      password: ROUTER_PASSWORD
      </code></pre></td>
    <td>
      替换 <code>ROUTER_USER</code> and <code>ROUTER_PASSWORD</code> 为你选择的用户名和安全密码.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  uaa:
    admin:
      client_secret: ADMIN_SECRET
    cc:
      client_secret: CC_CLIENT_SECRET
    clients:
      cc-service-dashboards:
        secret: CC_SERVICE_DASHBOARDS_SECRET
      cc_routing:
        secret: CC_ROUTING_SECRET
      cloud_controller_username_lookup:
        secret: CLOUD_CONTROLLER_USERNAME_LOOKUP_SECRET
      doppler:
        secret: DOPPLER_SECRET
      gorouter:
        secret: GOROUTER_SECRET
      tcp_emitter:
        secret: TCP-EMITTER-SECRET
      tcp_router:
        secret: TCP-ROUTER-SECRET
      login:
        secret: LOGIN_CLIENT_SECRET
      notifications:
        secret: NOTIFICATIONS_CLIENT_SECRET
    </code></pre></td>
    <td>替换所有<code>*_SECRET</code>值为 你生成的安全密码.
      </td>
  </tr>
  <tr>
    <td><pre><code>
    jwt:
      policy:
        active_key_id: key-1
        keys:
          key-1:
            signingKey: |
              -----BEGIN RSA PRIVATE KEY-----
              MIICXgIBAAKBgQDfTLadf6QgJeS2XXImEHMsa+1O7MmIt44xaL77N2K+J/JGpfV3
              AnkyB06wFZ02sBLB7hko42LIsVEOyTuUBird/3vlyHFKytG7UEt60Fl88SbAEfsU
              JN1i1aSUlunPS/NCz+BKwwKFP9Ss3rNImE9Uc2LMvGy153LHFVW2zrjhTwIDAQAB
              AoGBAJDh21LRcJITRBQ3CUs9PR1DYZPl+tUkE7RnPBMPWpf6ny3LnDp9dllJeHqz
              a3ACSgleDSEEeCGzOt6XHnrqjYCKa42Z+Opnjx/OOpjyX1NAaswRtnb039jwv4gb
              RlwT49Y17UAQpISOo7JFadCBoMG0ix8xr4ScY+zCSoG5v0BhAkEA8llNsiWBJF5r
              LWQ6uimfdU2y1IPlkcGAvjekYDkdkHiRie725Dn4qRiXyABeaqNm2bpnD620Okwr
              sf7LY+BMdwJBAOvgt/ZGwJrMOe/cHhbujtjBK/1CumJ4n2r5V1zPBFfLNXiKnpJ6
              J/sRwmjgg4u3Anu1ENF3YsxYabflBnvOP+kCQCQ8VBCp6OhOMcpErT8+j/gTGQUL
              f5zOiPhoC2zTvWbnkCNGlqXDQTnPUop1+6gILI2rgFNozoTU9MeVaEXTuLsCQQDC
              AGuNpReYucwVGYet+LuITyjs/krp3qfPhhByhtndk4cBA5H0i4ACodKyC6Zl7Tmf
              oYaZoYWi6DzbQQUaIsKxAkEA2rXQjQFsfnSm+w/9067ChWg46p4lq5Na2NpcpFgH
              waZKhM1W0oB8MX78M+0fG3xGUtywTx0D4N7pr1Tk2GTgNw==
              -----END RSA PRIVATE KEY-----
    </code></pre></td>
    <td>生成PEM编码的RSA键对. 这会生成文件 <code>jwt-key.pem.pub</code>, 它包含了你的公钥, 以及含有你密钥的文件<code>jwt-key.pem</code>. <br/>

    你可以使用命令 <code>openssl rsa -in jwt-key.pem -pubout > key.pub</code> 生成一对键. 该过程创建<code>jwt-key.pem.pub</code>, 它包含了你的公钥, 以及 <code>jwt-key.pem</code>, 它包含了你的密钥. 在<code>signingKey</code>下面将密钥的全部内容粘贴进来, 这包括<code>BEGIN</code>和<code>END</code> 分界行. </br>

    对RSA钥来讲, 只需要配置密钥. 你可以配置任意多的密钥. 然而, 只有一个密钥, <code>active_key_id</code>, 会被用来签署tokens.
    其他的密钥被用来验证签名.
    </td>
  </tr>
  <tr>
    <td><pre><code>
    scim:
      users:
      - name: admin
        password: ADMIN_PASSWORD
        groups:
          - scim.write
          - scim.read
          - o...
    </code></pre></td>
    <td>生成安全密码, 并用该值替换<code>ADMIN_PASSWORD</code>, 该值设定了Cloud Foundry 安装的Admin用户的密码.
    </td>
  </tr>
  <tr>
    <td><pre><code>
  uaadb:
    db_scheme: UAADB_SCHEME
    roles:
      - tag: admin
        name: UAADB_USER_NAME
        password: UAADB_USER_PASSWORD
    databases:
      - tag: uaa
        name: uaadb
    address: UAADB_ADDRESS
    port: UAADB_PORT
      </code></pre></td>
    <td>
      stub文件的这个部分定义 UAA 如何连接到其数据库.
      所用的值取决于你如何部署数据库.
      <br /><br />
      如果你使用了 <code>bosh aws create</code>, 在生成的文件 <code>aws_rds_bosh_receipt.yml</code>中找到所需的值. 该数据库是一个Amazon RDS实例, 且所有stub文件中的UAADB_*值必须匹配AWS定义的scheme, username, password, address, 及 port
      <br /><br />
      I如果你没有使用<code>bosh aws create</code>部署数据库, 例如使用了cf-release里面的<code>postgres</code> job, 则<code>UAADB_*</code>的值必须匹配数据库的配置. 如果你使用的是PostgreSQL, 你的数据库必须有为Cloud Foundry提供下列扩展: <code>uuid-ossp</code>, <code>pgcrypto</code>, 以及 <code>citext</code>.
      PostgreSQL数据库的<code>db_scheme</code>是 <code>postgresql</code>, 而不是 <code>postgres</code>.
      </td>
  </tr>
  <tr>
    <td><pre><code>
  hm9000:
    server_key: HM9000_SERVER_KEY
    server_cert: HM9000_SERVER_CERT
    client_key: HM9000_CLIENT_KEY
    client_cert: HM9000_CLIENT_CERT
    ca_cert: HM9000_CA_CERT
    </code></pre></td>
    <td>
      为HM9000生成SSL证书, 并替换上述值. 你可以使用cf-release repository中的脚本 <code>scripts/generate-hm9000-certs</code> 生成自签名的证书.
    </td>
  </tr>
</table>

<%= partial '../common/additional_config' %>

##<a id='generate'></a>Step 3: 生成你的部署manifest文件

<%= partial '../common/generic_manifest' %>
